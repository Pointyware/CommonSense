-- Category table: a tree of categories
CREATE TABLE category (
  creationId INTEGER PRIMARY KEY NOT NULL,
  uuid BLOB NOT NULL, -- 16 bytes
  parentId INTEGER,
  name TEXT NOT NULL
);

-- Concept table: a set of concepts within categories
CREATE TABLE concept (
  creationId INTEGER PRIMARY KEY NOT NULL,
  categoryId INTEGER NOT NULL,
  uuid BLOB NOT NULL -- 16 bytes
);

CREATE INDEX category_parent_id ON category(parentId);

INSERT INTO category (creationId, uuid, parentId, name)
VALUES (0, unhex("00000000000000000000000000000000"), NULL, 'Root');

-- Insert a new category under an existing category; default to root if parentId is null
insertCategory:
INSERT INTO category (uuid, parentId, name)
VALUES (
    :newId,
  COALESCE((SELECT creationId FROM category WHERE uuid = :parentId), 0),
  :name
);

getCategory:
SELECT uuid, name FROM category WHERE uuid = ?;

-- Insert a new concept into a category
insertInstance:
INSERT INTO concept (categoryId, uuid)
VALUES (
  (SELECT creationId FROM category WHERE uuid = :categoryId),
  :newId
);

-- Get all categories within a category
getCategories:
SELECT uuid, name
FROM
  category
WHERE
  parentId = (SELECT creationId FROM category WHERE uuid = ?);

-- Get all concepts within a category
getConcepts:
SELECT uuid, name, description
FROM concept
WHERE categoryId = (SELECT creationId FROM category WHERE uuid = ?);

-- Delete the given list of concepts
deleteConcepts:
DELETE FROM concept WHERE uuid IN ?;

-- Delete the given list of categories and all their children
deleteCategories:
DELETE FROM category WHERE uuid IN ?; -- TODO: delete all children; foreign key cascade?
