-- Type enumeration table
CREATE TABLE type (
  creationId INTEGER PRIMARY KEY NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  value_table TEXT
);
INSERT INTO type(name, description, value_table)
VALUES ('int', 'A 32-bit signed integer', 'int_values'),
       ('float', 'A 64-bit floating point number', 'float_values'),
       ('text', 'A string of text', 'text_values'),
       ('record', 'A set of values that conform to a specific record', 'instance_values');

-- Record table
CREATE TABLE records (
  id INTEGER PRIMARY KEY NOT NULL,
  uuid BLOB NOT NULL, -- 16 bytes
  name TEXT NOT NULL
);

-- Field table
CREATE TABLE fields (
  id INTEGER PRIMARY KEY NOT NULL,
  recordId INTEGER NOT NULL,
  name TEXT NOT NULL,
  type INTEGER NOT NULL,
   -- Functionally Boolean: 0 for false, 1 for true;
   --   table depends on type; row will be value with fieldId = id and instanceId = null
  has_default_value INTEGER NOT NULL,
  FOREIGN KEY (recordId) REFERENCES records(id),
  FOREIGN KEY (type) REFERENCES type(creationId)
);

-- Instance Field Type table: associates an instance-type field with a specific record
CREATE TABLE instance_fields (
  fieldId INTEGER PRIMARY KEY, -- FOREIGN KEY REFERENCES fields(creationId)
  recordTypeId INTEGER, -- FOREIGN KEY REFERENCES records(creationId),
  FOREIGN KEY (fieldId) REFERENCES fields(id),
  FOREIGN KEY (recordTypeId) REFERENCES records(id)
);

-- Instance table
CREATE TABLE instances (
  id INTEGER PRIMARY KEY NOT NULL,
  categoryId INTEGER NOT NULL,
  recordId INTEGER NOT NULL,
  uuid BLOB NOT NULL -- 16 bytes
);

-- All Values Below

-- Int Value table
CREATE TABLE int_values (
  instanceId INTEGER, -- Null for default values
  fieldId INTEGER NOT NULL,
  value INTEGER NOT NULL,
  PRIMARY KEY (instanceId, fieldId),
  FOREIGN KEY (instanceId) REFERENCES instances(id),
  FOREIGN KEY (fieldId) REFERENCES fields(id)
);

-- Float Value table
CREATE TABLE float_values (
  instanceId INTEGER, -- Null for default values
  fieldId INTEGER NOT NULL,
  value REAL NOT NULL,
  PRIMARY KEY (instanceId, fieldId),
  FOREIGN KEY (instanceId) REFERENCES instances(id),
  FOREIGN KEY (fieldId) REFERENCES fields(id)
);

-- Text Value table
CREATE TABLE text_values (
  instanceId INTEGER, -- Null for default values
  fieldId INTEGER NOT NULL,
  value TEXT NOT NULL,
  PRIMARY KEY (instanceId, fieldId),
  FOREIGN KEY (instanceId) REFERENCES instances(id),
  FOREIGN KEY (fieldId) REFERENCES fields(id)
);

-- Instance Value table
CREATE TABLE instance_values (
  instanceId INTEGER NOT NULL,
  fieldId INTEGER NOT NULL,
  instanceValueId INTEGER NOT NULL,
  PRIMARY KEY (instanceId, fieldId),
  FOREIGN KEY (instanceValueId) REFERENCES instances(id),
  FOREIGN KEY (fieldId) REFERENCES fields(id),
  FOREIGN KEY (instanceId) REFERENCES instances(id)
);

-- Type change trigger
CREATE TRIGGER type_change
BEFORE UPDATE OF type ON fields
BEGIN
  DELETE FROM int_values WHERE fieldId = "OLD.id" AND instanceId IS NULL;
  DELETE FROM float_values WHERE fieldId = "OLD.id" AND instanceId IS NULL;
  DELETE FROM text_values WHERE fieldId = "OLD.id" AND instanceId IS NULL;
  DELETE FROM instance_values WHERE fieldId = "OLD.id" AND instanceId IS NULL;
END;

-- Create a new Record type template
createRecord:
INSERT INTO records (uuid, name)
VALUES (:recordId, :recordName);

getRecord:
SELECT uuid, name FROM records WHERE uuid = :recordId;

getRecordFields:
SELECT fields.name AS fieldName, type.name AS typeName, has_default_value AS hasDefault
FROM
    fields JOIN type
    ON fields.type = type.creationId
WHERE recordId = (SELECT id FROM records WHERE uuid = :recordId);

-- Add a Field to a Record
addIntField:
INSERT INTO fields (recordId, name, type, has_default_value)
VALUES (
  (SELECT id FROM records WHERE uuid = :recordId),
  :recordName,
  (SELECT creationId FROM type WHERE name = 'int'),
  :hasDefaultValue
);

addFloatField:
INSERT INTO fields (recordId, name, type, has_default_value)
VALUES (
  (SELECT id FROM records WHERE uuid = :recordId),
  :recordName,
  (SELECT creationId FROM type WHERE name = 'float'),
  :hasDefaultValue
);

getFloatField:
SELECT value
FROM float_values
WHERE instanceId = (SELECT id FROM instances WHERE uuid = :instanceId);

addTextField:
INSERT INTO fields (recordId, name, type, has_default_value)
VALUES (
  (SELECT id FROM records WHERE uuid = :recordId),
  :recordName,
  (SELECT creationId FROM type WHERE name = 'text'),
  :hasDefaultValue
);

getTextField:
SELECT value
FROM text_values
WHERE instanceId = (SELECT id FROM instances WHERE uuid = :instanceId);

addRecordField:
INSERT INTO fields (recordId, name, type, has_default_value)
VALUES (
  (SELECT id FROM records WHERE uuid = :recordId),
  :recordName,
  (SELECT creationId FROM type WHERE name = 'instance'),
  :hasDefaultValue
);

getRecordField:
SELECT instanceValueId
FROM instance_values
WHERE instanceId = (SELECT id FROM instances WHERE uuid = :instanceId);

setRecordFieldType:
INSERT INTO instance_fields (fieldId, recordTypeId)
VALUES (
  (SELECT id FROM fields WHERE recordId = (SELECT id FROM records WHERE uuid = :recordId) AND name = :fieldName),
  (SELECT id FROM records WHERE uuid = :recordTypeId)
);

-- Create a new Instance from a Record type
createInstance:
INSERT INTO instances (recordId, uuid, categoryId)
VALUES (
  (SELECT id FROM records WHERE uuid = :recordId),
  :instanceId,
  (SELECT id FROM category WHERE uuid = :categoryId)
);

-- Set an Instance Value
setInstanceIntValue:
INSERT INTO int_values (instanceId, fieldId, value)
VALUES (
  (SELECT id FROM instances WHERE uuid = :instanceId),
  (SELECT id FROM fields WHERE recordId = (SELECT id FROM records WHERE uuid = :recordId) AND name = :fieldName),
  :value
);

getIntFieldValue:
SELECT value
FROM int_values
WHERE instanceId = (SELECT id FROM instances WHERE uuid = :instanceId)
AND fieldId = (SELECT id FROM fields WHERE recordId = (SELECT id FROM records WHERE uuid = :recordId) AND name = :fieldName);

getInstancesByIds:
SELECT instances.uuid AS instanceId, records.uuid AS recordId, fields.name AS fieldName, int_values.value AS intValue
FROM instances
JOIN records ON instances.recordId = records.id
JOIN int_values ON instances.id = int_values.instanceId
JOIN fields ON int_values.fieldId = fields.id
WHERE instances.uuid IN :instanceIds;

-- Delete the given list of instances
deleteInstances:
DELETE FROM instances WHERE uuid IN :instanceIds;

-- Get all concepts within a category
getInstancesInCategory:
SELECT instances.uuid AS instanceId, records.uuid AS recordId, fields.name AS fieldName, int_values.value AS intValue
FROM instances
JOIN records ON instances.recordId = records.id
JOIN int_values ON instances.id = int_values.instanceId
JOIN fields ON int_values.fieldId = fields.id
WHERE instanceId IN (
    SELECT id FROM instances
    WHERE categoryId = (
        SELECT creationId FROM category WHERE uuid = :categoryId
    )
);
